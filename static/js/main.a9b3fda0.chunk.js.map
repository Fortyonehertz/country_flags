{"version":3,"sources":["Breakpoints.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Device","xs","sm","lg","primary","secondary","contrast2","StyledApp","styled","div","App","useState","country","setCountry","isCorrect","setIsCorrect","options","setOptions","incorrectAnswers","setIncorrectAnswers","currentScore","setCurrentScore","bestScore","setBestScore","countryCodes","Object","keys","Countries","console","log","randomInRange","min","max","Math","floor","random","getRandomCountry","length","nextCountry","nextOptions","possibleOption","includes","push","randomiseOptions","selectedOptions","usedIndexes","index","useEffect","inIncorrectAnwers","option","className","src","toLowerCase","alt","onClick","map","val","style","backgroundColor","undefined","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9b3fda0.chunk.js","sourcesContent":["const Device = {\n    xs: `(max-width: 320px)`,\n    sm: `(max-width: 768px)`,\n    lg: `(max-width: 800px)`,\n};\n\nexport default Device;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport Device from \"./Breakpoints\";\n\nimport Countries from \"./countries.json\";\n\ntype CountryCode = keyof typeof Countries;\n\nconst primary = \"191919\";\nconst secondary = \"F6E4F6\";\nconst correct = \"218380 \";\nconst incorrect = \"E3655B\";\nconst contrast = \"C6D8D3\";\nconst contrast2 = \"218380\";\n\nconst StyledApp = styled.div<{ isCorrect: boolean }>`\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    justify-content: center;\n    overflow-x: hidden;\n    overflow-y: hidden;\n    align-items: center;\n    background-color: ${`#${primary}`};\n    height: 100vh;\n    width: 100vw;\n\n    .title {\n        color: ${`#${secondary}`};\n        font-size: 2.5rem;\n        padding: 0px;\n        margin: 0px;\n    }\n\n    .flag {\n        width: 35%;\n        aspect-ratio: 16 / 9;\n        border: solid ${`#${secondary}`} 4px;\n        border-radius: 24px;\n\n        @media ${Device.lg} {\n            width: 80%;\n        }\n    }\n\n    .bottom {\n        width: 100%;\n        height: 25%;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        gap: 1rem;\n        font-size: 0.8rem;\n\n        .game {\n            width: 35%;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            gap: 1rem;\n\n            @media ${Device.lg} {\n                width: 80%;\n            }\n    \n            .score {\n                color: ${`#${secondary}`};\n                font-size: 0.8rem;\n            }\n        \n            .options {\n                width: 100%;\n                display: flex;\n                flex-direction: row;\n                flex-wrap: wrap;\n                gap: 1rem;\n            }\n        }\n\n        .correct {\n            color: ${`#${secondary}`};\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            gap: 1rem;\n    \n            .subtitle {\n                font-size: 2rem;\n            }\n    \n            .next {\n                background-color: ${`#${contrast2}`};\n                color: ${`#${secondary}`};\n                min-width: 24ch;\n                flex-grow: 0;\n                font-size: 1rem;\n        \n                &:hover {\n                    background-color: ${`#${contrast2}`};\n                    box-shadow: 0px 6px 16px -8px ${`#${secondary}`};\n                }\n        \n                transition: box-shadow 0.4s;\n        \n                @media ${Device.lg} {\n                    font-size: 0.8rem;\n                    min-width: 0ch;\n                    padding: 1rem 2rem;\n                }\n            }\n        }    \n    }\n\n\n\n    .button {\n        font-size: 1rem;\n        width: 15rem;\n        flex-grow: 1;\n        padding: 1rem 2rem;\n        border: none;\n        border-radius: 24px;\n        background-color: ${`#${secondary}`};\n        color: ${`#${primary}`};\n\n        transition: background-color 0.6s;\n\n        @media (hover: hover) {\n            &:hover {\n                background-color: ${`#${contrast}`};\n            }\n        }\n\n        @media (hover: none) {\n            &:hover {\n                background-color: ${`#${secondary}`};\n            }\n        }\n\n        @media ${Device.lg} {\n            font-size: 0.8rem;\n        }\n    }\n`;\n\nfunction App() {\n    const [country, setCountry] = useState<CountryCode>(\"AD\");\n    const [isCorrect, setIsCorrect] = useState(false);\n    const [options, setOptions] = useState<Array<CountryCode>>([]);\n    const [incorrectAnswers, setIncorrectAnswers] = useState<\n        Array<CountryCode>\n    >([]);\n    const [currentScore, setCurrentScore] = useState(0);\n    const [bestScore, setBestScore] = useState(0);\n    const countryCodes: CountryCode[] = Object.keys(\n        Countries\n    ) as unknown as CountryCode[];\n\n    console.log('Rerender')\n\n    const randomInRange = (min: number, max: number) => {\n        return Math.floor(Math.random() * (max - min)) + min;\n    };\n\n    const getRandomCountry = () => {\n        return countryCodes[randomInRange(0, countryCodes.length)];\n    };\n\n    const nextCountry = () => {\n        // Choose a random country from list\n        var nextCountry = getRandomCountry();\n        var nextOptions = [nextCountry];\n        while (nextOptions.length < 4) {\n            var possibleOption = getRandomCountry();\n            if (!nextOptions.includes(possibleOption)) {\n                nextOptions.push(possibleOption);\n            }\n        }\n        setCountry(nextCountry);\n        setOptions(randomiseOptions(nextOptions));\n        setIncorrectAnswers([]);\n        setIsCorrect(false);\n    };\n\n    const checkAnswer = (val: CountryCode) => {\n        if (val === country) {\n            setIsCorrect(true);\n            if (incorrectAnswers.length === 0) {\n                if (currentScore + 1 > bestScore) {\n                    setBestScore(currentScore + 1);\n                }\n                setCurrentScore(currentScore + 1);\n            }\n        } else {\n            setIncorrectAnswers([...incorrectAnswers, val]);\n            setCurrentScore(0);\n        }\n    };\n\n    const randomiseOptions = (selectedOptions: CountryCode[]): CountryCode[] => {\n        var usedIndexes: number[] = [];\n        var nextOptions: CountryCode[] = [];\n        while (usedIndexes.length < 4) {\n            var index = randomInRange(0, 4);\n            if (!usedIndexes.includes(index)) {\n                usedIndexes.push(index);\n                nextOptions.push(selectedOptions[index]);\n            }\n        }\n        return nextOptions;\n    }\n\n    useEffect(() => {\n        nextCountry();\n    }, []);\n\n    const inIncorrectAnwers = (option: CountryCode): boolean => {\n        return incorrectAnswers.includes(option);\n    };\n\n    return (\n        <StyledApp className=\"App\" isCorrect={isCorrect}>\n            <img\n                className=\"flag\"\n                src={`images/${country.toLowerCase()}.png`}\n                alt=\"Country Flag\"\n            />\n            \n\n            <div className=\"bottom\">\n                {isCorrect ? (\n                    <div className=\"correct\">\n                        <div className=\"subtitle\">Correct!</div>\n                        You chose: {Countries[country]}\n                        <button className=\"button next\" onClick={nextCountry}>\n                            Next Country\n                        </button>\n                        {(currentScore === bestScore && currentScore > 0) ? <div>New high score! {bestScore}</div> : null }\n                    </div>\n                ) : <div className=\"game\">\n                        <div className=\"options\">\n                            {options.map((option) => {\n                                return (\n                                    <button\n                                        className=\"button\"\n                                        onClick={() => checkAnswer(option)}\n                                        style={\n                                            inIncorrectAnwers(option)\n                                                ? { backgroundColor: `#${incorrect}` }\n                                                : isCorrect && option === country\n                                                ? { backgroundColor: `#${correct}` }\n                                                : undefined\n                                        }\n                                        disabled={inIncorrectAnwers(option) || isCorrect}\n                                    >\n                                        {Countries[option]}\n                                    </button>\n                                );\n                            })}\n                        </div>\n                        <p className=\"score\">Score: {currentScore}</p>\n                    </div>\n                }\n            </div>\n        </StyledApp>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}